local APIOverride = [==[]==]
local HttpService = game:GetService("HttpService")
local API = {}
local APIJson
local instanceCount = 0
local saveString = ""
local storedInstances = {}
local instanceRefs = {}
local savedProps = {}
local propFunc = {}
local extraFolder = Instance.new("Folder")
extraFolder.Name = "_IMPORTANT_AND_EXTRA_INSTANCES_"

local ignoreProps = {
    ["Instance"] = {
        ["Archivable"] = true,
        ["DataCost"] = true,
        ["ClassName"] = true,
        ["RobloxLocked"] = true,
        ["Parent"] = true
    },
    ["Workspace"] = {
        ["DistributedGameTime"] = true
    },
    ["BasePart"] = {
        ["Position"] = true,
        ["Rotation"] = true
    }
}

local propAlt = {
    ["Sound"] = {
        ["MaxDistance"] = "xmlRead_MaxDistance_3"
    }
}

local function loadAPIJson()
    local success, err = pcall(function()
        if APIOverride and APIOverride ~= "" then
            APIJson = APIOverride
        else
            if isfile("API-DUMP.json") then
                APIJson = readfile("API-DUMP.json")
            else
                writefile("API-DUMP.json", game:HttpGetAsync("https://raw.githubusercontent.com/LiterallyATrueClown/Owo/main/rbxapi.json"))
                APIJson = readfile("API-DUMP.json")
            end
        end
    end)

    if not success then
        if script:FindFirstChild("API") then
            APIJson = require(script.API)
        else
            error("Failed to load APIJson: " .. err)
        end
    end

    APIJson = HttpService:JSONDecode(APIJson)
end

local function processAPIJson()
    for _, v in pairs(APIJson) do
        if v.type == "Class" then
            API[v.Name] = v
            API[v.Name].Properties = {}
        elseif v.type == "Property" then
            local dontuse = false
            for _, v2 in pairs(v.tags) do
                if v2 == "deprecated" or v2 == "hidden" or v2 == "readonly" then
                    dontuse = true
                end
            end
            if ignoreProps[v.Class] and ignoreProps[v.Class][v.Name] then
                dontuse = true
            end
            if propAlt[v.Class] and propAlt[v.Class][v.Name] then
                v.AltName = propAlt[v.Class][v.Name]
            end
            if not dontuse then
                table.insert(API[v.Class].Properties, v)
            end
        end
    end
end

local function getProperties(obj)
    print(savedProps)
    if savedProps[obj.ClassName] then return savedProps[obj.ClassName] end
    
    local tempProps = {}
    local currentClass = obj.ClassName
    
    while currentClass do
        for i, v in pairs(API[currentClass].Properties) do
            table.insert(tempProps, v)
        end
        currentClass = API[currentClass].Superclass
    end
    
    table.sort(tempProps, function(a, b)
        return (a.AltName or a.Name) < (b.AltName or b.Name)
    end)
    savedProps[obj.ClassName] = tempProps
    return tempProps
end

local function checkRef(obj)
    local check = instanceRefs[obj]
    if check then
        return tostring(check)
    end
    instanceRefs[obj] = instanceCount
    return tostring(instanceCount)
end

local function setRef(obj)
    if obj == nil then return "null" end
    local check = instanceRefs[obj]
    if check then
        return "RBX" .. tostring(check)
    end
    instanceCount = instanceCount + 1
    instanceRefs[obj] = instanceCount
    return "RBX" .. tostring(instanceCount)
end

local specialClassCases = {
    ["Workspace"] = function(inst)
        if inst:PGSIsEnabled() then
            saveString = saveString .. '\n<bool name="PGSPhysicsSolverEnabled">true</bool>'
        else
            saveString = saveString .. '\n<bool name="PGSPhysicsSolverEnabled">false</bool>'
        end
        propFunc["double"](inst, "FallenPartsDestroyHeight")
    end
}

local function writeInstance(inst, altData)
    if API[inst.ClassName] then
        instanceCount = instanceCount + 1
        local props = getProperties(inst)
        saveString = saveString .. '\n<Item class="' .. inst.ClassName .. '" referent="RBX' .. checkRef(inst) .. '">'
        saveString = saveString .. "\n<Properties>"
        for _, prop in pairs(props) do
            ypcall(function()
                local propF = propFunc[prop.ValueType]
                if propF then
                    if not prop.AltName then
                        propF(inst, prop.Name)
                    else
                        table.insert(storedInstances, saveString)
                        saveString = ""
                        propF(inst, prop.Name)
                        saveString = string.gsub(saveString, prop.Name, prop.AltName)
                    end
                elseif inst[prop.Name].Value then
                    saveString = saveString .. '\n<token name="' .. (prop.AltName or prop.Name) .. '">' .. inst[prop.Name].Value .. '</token>'
                end
                table.insert(storedInstances, saveString)
                saveString = ""
            end)
        end
        if specialClassCases[inst.ClassName] then
            specialClassCases[inst.ClassName](inst)
        end
        saveString = saveString .. "\n</Properties>"
        if inst == extraFolder then
            if getnilinstances then
                local nilFolder = Instance.new("Folder", extraFolder)
                nilFolder.Name = "Nil Instances"
                local nilledInstances = {}
                for i, v in pairs(getnilinstances()) do
                    if v.Name ~= "_DexTrash_" and v ~= extraFolder then
                        table.insert(nilledInstances, v)
                    end
                end
                writeInstance(nilFolder, nilledInstances)
            end

        elseif altData then
            for i, v in pairs(altData) do
                writeInstance(v)
            end
        else
            for i, v in pairs(inst:GetChildren()) do
                writeInstance(v)
            end
        end
        saveString = saveString .. "\n</Item>"
        table.insert(storedInstances, saveString)
        saveString = ""
    end
end

local function processSpecialClassCases(inst)
    local specialCaseFunction = specialClassCases[inst.ClassName]
    if specialCaseFunction then
        specialCaseFunction(inst)
    end
end

local function generateXml()
    saveString = [[<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
<External>null</External>
<External>nil</External>]]
    writeInstance(extraFolder)
    table.insert(storedInstances, "\n</roblox>")
    writefile("output.rbxmx", table.concat(storedInstances))
    storedInstances = {}
end

local function main()
    loadAPIJson()
    processAPIJson()
    local success, err = pcall(function()
        func_SInstance(workspace, "output")
    end)
    if not success then
        warn("Failed to execute func_SInstance: " .. err)
    end
    generateXml()
end

main()
